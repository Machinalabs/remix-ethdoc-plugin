[{"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/index.tsx":"1","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/App.tsx":"2","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/utils.ts":"3","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/routes.tsx":"4","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/hooks/useLocalStorage.tsx":"5","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/AppContext.tsx":"6","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/template.ts":"7","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/views/index.ts":"8","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/views/ErrorView.tsx":"9","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/views/HomeView.tsx":"10","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/index.ts":"11","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/publisher.ts":"12"},{"size":235,"mtime":1614763960000,"results":"13","hashOfConfig":"14"},{"size":2900,"mtime":1614769189000,"results":"15","hashOfConfig":"14"},{"size":3501,"mtime":1614765058000,"results":"16","hashOfConfig":"14"},{"size":673,"mtime":1614763960000,"results":"17","hashOfConfig":"14"},{"size":1255,"mtime":1614763960000,"results":"18","hashOfConfig":"14"},{"size":690,"mtime":1614769189000,"results":"19","hashOfConfig":"14"},{"size":3944,"mtime":1614763960000,"results":"20","hashOfConfig":"14"},{"size":80,"mtime":1614763960000,"results":"21","hashOfConfig":"14"},{"size":729,"mtime":1614763960000,"results":"22","hashOfConfig":"14"},{"size":6338,"mtime":1614858359000,"results":"23","hashOfConfig":"14"},{"size":54,"mtime":1614763960000,"results":"24","hashOfConfig":"14"},{"size":395,"mtime":1614763960000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1p6xr9v",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/index.tsx",[],["52","53"],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/App.tsx",["54"],"import React, { useState, useEffect, useRef } from \"react\";\n\nimport { PluginClient } from \"@remixproject/plugin\";\nimport { createClient } from \"@remixproject/plugin-webview\";\nimport {\n  CompilationFileSources,\n  CompilationResult,\n} from \"@remixproject/plugin-api/\";\nimport { Status } from \"@remixproject/plugin-utils\";\n\nimport { AppContext } from \"./AppContext\";\nimport { Routes } from \"./routes\";\nimport { useLocalStorage } from \"./hooks/useLocalStorage\";\nimport { createDocumentation } from \"./utils/utils\";\n\nimport \"./App.css\";\nimport { ContractName, Documentation } from \"./types\";\n\nconst devMode = { port: 8080 };\n\nexport const getNewContractNames = (compilationResult: CompilationResult) => {\n  const compiledContracts = compilationResult.contracts;\n  let result: string[] = [];\n\n  for (const file of Object.keys(compiledContracts)) {\n    const newContractNames = Object.keys(compiledContracts[file]);\n    result = [...result, ...newContractNames];\n  }\n\n  return result;\n};\n\nconst sampleMap = new Map<ContractName, Documentation>();\n\nconst App = () => {\n  const [clientInstance, setClientInstance] = useState(undefined as any);\n  const [contracts, setContracts] = useState(sampleMap);\n  const [sites, setSites] = useLocalStorage(\"sites\", []);\n  const clientInstanceRef = useRef(clientInstance);\n  clientInstanceRef.current = clientInstance;\n  const contractsRef = useRef(contracts);\n  contractsRef.current = contracts;\n\n  useEffect(() => {\n    console.log(\"Remix EthDoc loading...\");\n    const client = createClient(new PluginClient());\n    const loadClient = async () => {\n      await client.onload();\n      setClientInstance(client);\n      console.log(\"Remix EthDoc Plugin has been loaded\");\n      //await client.call(\"manager\" as any, \"activatePlugin\", \"ethdoc-viewer\");\n      client.solidity.on(\n        \"compilationFinished\",\n        (\n          fileName: string,\n          source: CompilationFileSources,\n          languageVersion: string,\n          data: CompilationResult\n        ) => {\n          console.log(\"New compilation received\");\n\n          const existingMap = contractsRef.current;\n          const newContractsMapWithDocumentation = createDocumentation(\n            fileName,\n            data\n          );\n          const newMap = new Map([\n            ...existingMap,\n            ...newContractsMapWithDocumentation,\n          ]);\n\n          const status: Status = {\n            key: \"succeed\",\n            type: \"success\",\n            title: \"New documentation ready\",\n          };\n          clientInstanceRef.current.emit(\"statusChanged\", status);\n          setContracts(newMap);\n        }\n      );\n    };\n\n    loadClient();\n  }, []);\n\n  return (\n    <AppContext.Provider\n      value={{\n        clientInstance,\n        contracts,\n        setContracts,\n        sites,\n        setSites,\n      }}\n    >\n      <Routes />\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/utils.ts",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/routes.tsx",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/hooks/useLocalStorage.tsx",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/AppContext.tsx",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/template.ts",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/views/index.ts",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/views/ErrorView.tsx",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/views/HomeView.tsx",["55","56"],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/index.ts",[],"/Volumes/butbut/code/testp/remix-ethdoc-plugin/src/utils/publisher.ts",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":19,"column":7,"nodeType":"63","messageId":"64","endLine":19,"endColumn":14},{"ruleId":"61","severity":1,"message":"65","line":6,"column":10,"nodeType":"63","messageId":"64","endLine":6,"endColumn":25},{"ruleId":"61","severity":1,"message":"66","line":14,"column":10,"nodeType":"63","messageId":"64","endLine":14,"endColumn":18},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'devMode' is assigned a value but never used.","Identifier","unusedVar","'CopyToClipboard' is defined but never used.","'isCopied' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]